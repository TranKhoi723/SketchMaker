#!/bin/bash
# scripts/run.sh

# --- Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ---
PROJECT_ROOT=$(dirname "$(realpath "$0")")/..
INPUT_DIR="$PROJECT_ROOT/input"
TEMPLATE_DIR="$PROJECT_ROOT/templates"
OUTPUT_DIR="$PROJECT_ROOT/output"
SCRIPT_DIR="$PROJECT_ROOT/scripts"
CONFIG_FILE="$PROJECT_ROOT/config.tmp.json" # File c·∫•u h√¨nh t·∫°m th·ªùi

# --- D·ªçn d·∫πp ---
echo "üßπ D·ªçn d·∫πp c√°c file output v√† config c≈©..."
rm -f "$OUTPUT_DIR"/*
rm -f "$CONFIG_FILE"
echo ""

# --- B∆Ø·ªöC 1: CH·ªåN FILE STEP ---
echo " STEP 1: Ch·ªçn file STEP ƒë·ªÉ x·ª≠ l√Ω"
echo "-------------------------------------"
mapfile -t step_files < <(ls -1 "$INPUT_DIR"/*.step 2>/dev/null)
if [ ${#step_files[@]} -eq 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file .step n√†o trong th∆∞ m·ª•c ./input/"
    exit 1
fi
PS3="Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi file b·∫°n mu·ªën ch·ªçn: "
select selected_step_path in "${step_files[@]}"; do
    if [[ -n "$selected_step_path" ]]; then
        INPUT_FILE=$(basename "$selected_step_path")
        break
    else
        echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
    fi
done
echo ""

# --- B∆Ø·ªöC 2: CH·ªåN TEMPLATE ---
echo " STEP 2: Ch·ªçn template (khung t√™n/kh·ªï gi·∫•y)"
echo "------------------------------------------------"
mapfile -t template_files < <(ls -1 "$TEMPLATE_DIR"/*.svg 2>/dev/null)
if [ ${#template_files[@]} -eq 0 ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file template .svg n√†o trong th∆∞ m·ª•c ./templates/"
    exit 1
fi
PS3="Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi template b·∫°n mu·ªën d√πng: "
select selected_template_path in "${template_files[@]}"; do
    if [[ -n "$selected_template_path" ]]; then
        TEMPLATE_FILE=$(basename "$selected_template_path")
        PAPER_SIZE=$(basename "$TEMPLATE_FILE" .svg | sed 's/template_//' | tr '[:lower:]' '[:upper:]')
        break
    else
        echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
    fi
done
echo ""

# --- B∆Ø·ªöC 3: C·∫§U H√åNH TH√îNG S·ªê B·∫¢N V·∫º ---
echo " STEP 3: C·∫•u h√¨nh th√¥ng s·ªë b·∫£n v·∫Ω"
echo "-------------------------------------"
read -p "Nh·∫≠p t·ªâ l·ªá (v√≠ d·ª•: 0.1) [M·∫∑c ƒë·ªãnh: 1]: " SCALE_INPUT
SCALE=${SCALE_INPUT:-1}

read -p "Ch·ªçn ki·ªÉu chi·∫øu (THIRD_ANGLE/FIRST_ANGLE) [M·∫∑c ƒë·ªãnh: THIRD_ANGLE]: " PROJ_METHOD_INPUT
PROJECTION_METHOD=${PROJ_METHOD_INPUT:-THIRD_ANGLE}

read -p "Nh·∫≠p h·ªá s·ªë kho·∫£ng c√°ch gi·ªØa c√°c h√¨nh chi·∫øu (v√≠ d·ª•: 1.5) [M·∫∑c ƒë·ªãnh: 1.5]: " SPACING_FACTOR_INPUT
SPACING_FACTOR=${SPACING_FACTOR_INPUT:-1.5}

read -p "Nh·∫≠p kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c h√¨nh chi·∫øu (mm) [M·∫∑c ƒë·ªãnh: 20.0]: " MIN_SPACING_INPUT
MIN_SPACING=${MIN_SPACING_INPUT:-20.0}

read -p "Nh·∫≠p kho·∫£ng c√°ch ƒë∆∞·ªùng k√≠ch th∆∞·ªõc so v·ªõi h√¨nh chi·∫øu (mm) [M·∫∑c ƒë·ªãnh: 15.0]: " DIM_OFFSET_INPUT
DIMENSION_OFFSET=${DIM_OFFSET_INPUT:-15.0}

read -p "Nh·∫≠p chi·ªÅu cao ch·ªØ k√≠ch th∆∞·ªõc (mm) [M·∫∑c ƒë·ªãnh: 2.5]: " DIM_TEXT_HEIGHT_INPUT
DIMENSION_TEXT_HEIGHT=${DIM_TEXT_HEIGHT_INPUT:-2.5}

read -p "Nh·∫≠p chi·ªÅu d√†i t·ªëi thi·ªÉu c·ªßa k√≠ch th∆∞·ªõc c·∫ßn t·ª± ƒë·ªông t·∫°o (mm) [M·∫∑c ƒë·ªãnh: 5.0]: " MIN_DIM_LEN_INPUT
MIN_DIMENSION_LENGTH=${MIN_DIM_LEN_INPUT:-5.0}

read -p "Nh·∫≠p s·ªë l∆∞·ª£ng k√≠ch th∆∞·ªõc t·ªëi ƒëa m·ªói h√¨nh chi·∫øu [M·∫∑c ƒë·ªãnh: 20]: " MAX_DIMS_INPUT
MAX_DIMENSIONS_PER_VIEW=${MAX_DIMS_INPUT:-20}

read -p "T·ª± ƒë·ªông ghi k√≠ch th∆∞·ªõc g√≥c (true/false) [M·∫∑c ƒë·ªãnh: true]: " DIM_ANGLES_INPUT
DIMENSION_ANGLES=${DIM_ANGLES_INPUT:-true}

read -p "T·ª± ƒë·ªông ghi k√≠ch th∆∞·ªõc b√°n k√≠nh (true/false) [M·∫∑c ƒë·ªãnh: true]: " DIM_RADII_INPUT
DIMENSION_RADII=${DIM_RADII_INPUT:-true}

read -p "T·ª± ƒë·ªông ghi k√≠ch th∆∞·ªõc ƒë∆∞·ªùng k√≠nh (true/false) [M·∫∑c ƒë·ªãnh: true]: " DIM_DIAMETERS_INPUT
DIMENSION_DIAMETERS=${DIM_DIAMETERS_INPUT:-true}
echo ""

# --- X√ÅC NH·∫¨N ---
echo "================ T√ìM T·∫ÆT C·∫§U H√åNH ================"
echo "  File v√†o             : $INPUT_FILE"
echo "  Template             : $TEMPLATE_FILE (Kh·ªï gi·∫•y: $PAPER_SIZE)"
echo "  T·ªâ l·ªá                : $SCALE"
echo "  Ki·ªÉu chi·∫øu           : $PROJECTION_METHOD"
echo "  H·ªá s·ªë kho·∫£ng c√°ch    : $SPACING_FACTOR"
echo "  Kho·∫£ng c√°ch t·ªëi thi·ªÉu: $MIN_SPACING mm"
echo "  Offset ƒë∆∞·ªùng k√≠ch th∆∞·ªõc: $DIMENSION_OFFSET mm"
echo "  Chi·ªÅu cao ch·ªØ k√≠ch th∆∞·ªõc: $DIMENSION_TEXT_HEIGHT mm"
echo "  Chi·ªÅu d√†i dim t·ªëi thi·ªÉu: $MIN_DIMENSION_LENGTH mm"
echo "  Dim t·ªëi ƒëa/h√¨nh chi·∫øu: $MAX_DIMENSIONS_PER_VIEW"
echo "  Ghi k√≠ch th∆∞·ªõc g√≥c   : $DIMENSION_ANGLES"
echo "  Ghi k√≠ch th∆∞·ªõc b√°n k√≠nh: $DIMENSION_RADII"
echo "  Ghi k√≠ch th∆∞·ªõc ƒë∆∞·ªùng k√≠nh: $DIMENSION_DIAMETERS"
echo "================================================="
read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (Y/n): " confirm
if [[ "$confirm" != "Y" && "$confirm" != "y" && "$confirm" != "" ]]; then
    echo "H·ªßy b·ªè."
    exit 0
fi

# --- T·∫†O FILE C·∫§U H√åNH ---
echo "üìù T·∫°o file c·∫•u h√¨nh t·∫°m th·ªùi..."
cat > "$CONFIG_FILE" << EOL
{
  "INPUT_FILE": "$INPUT_FILE",
  "TEMPLATE_FILE": "$TEMPLATE_FILE",
  "PROJECTION_METHOD": "$PROJECTION_METHOD",
  "SPACING_FACTOR": "$SPACING_FACTOR",
  "MIN_SPACING": "$MIN_SPACING",
  "DIMENSION_OFFSET": "$DIMENSION_OFFSET",
  "DIMENSION_TEXT_HEIGHT": "$DIMENSION_TEXT_HEIGHT",
  "MIN_DIMENSION_LENGTH": "$MIN_DIMENSION_LENGTH",
  "MAX_DIMENSIONS_PER_VIEW": "$MAX_DIMENSIONS_PER_VIEW",
  "DIMENSION_ANGLES": "$DIMENSION_ANGLES",
  "DIMENSION_RADII": "$DIMENSION_RADII",
  "DIMENSION_DIAMETERS": "$DIMENSION_DIAMETERS"
}
EOL
echo "‚úÖ ƒê√£ t·∫°o file config.tmp.json"
echo ""

# --- TH·ª∞C THI B·∫∞NG DOCKER ---
echo "üê≥ ƒêang build Docker image (n·∫øu c·∫ßn)..."
# ƒê√£ b·ªè c·ªù --no-cache ƒë·ªÉ c√°c l·∫ßn sau build nhanh h∆°n
docker build -t freecad-automation-macro "$PROJECT_ROOT" > /dev/null

echo "üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh x·ª≠ l√Ω b√™n trong container..."
docker run --rm \
  -v "$INPUT_DIR:/app/input" \
  -v "$TEMPLATE_DIR:/app/templates" \
  -v "$OUTPUT_DIR:/app/output" \
  -v "$SCRIPT_DIR:/app/scripts" \
  -v "$CONFIG_FILE:/app/config.json" \
  freecad-automation-macro

# D·ªçn d·∫πp file config sau khi ch·∫°y xong
rm -f "$CONFIG_FILE"

echo "üéâüéâüéâ QUY TR√åNH HO√ÄN T·∫§T! üéâüéâüéâ"
final_svg_file="$OUTPUT_DIR/final_drawing.svg"
if [[ -f "$final_svg_file" ]]; then
    echo "üëÄ M·ªü file k·∫øt qu·∫£: $final_svg_file"
    command -v xdg-open > /dev/null && xdg-open "$final_svg_file" || echo "Kh√¥ng th·ªÉ t·ª± ƒë·ªông m·ªü file."
else
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file output cu·ªëi c√πng 'final_drawing.svg'."
fi